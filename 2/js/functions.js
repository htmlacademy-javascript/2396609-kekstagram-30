/* Функция для проверки длины строки.
Она принимает строку, которую нужно проверить, и максимальную длину:
и возвращает true, если строка меньше или равна указанной длине,
и false, если строка длиннее.
Эта функция нам пригодится для валидации формы. */

/*Что использовать?
Для решения этой задачи вам потребуется объявить функцию с двумя параметрами: строкой и максимальной длиной. В теле функции используйте оператор сравнения меньше или равно (<=), чтобы сравнить длину полученной строки (свойство length) с максимальной длиной.
Функция должна вернуть результат этого сравнения.
Обратите внимание, что для решения этой задачи можно использовать if/else или тернарный оператор, однако это избыточно, так как операция сравнения сама по себе возвращает нужный нам результат.
*/

function checkStringLength (string, symbols) {
  return string.length <= symbols;
}

checkStringLength ('проверяемая строка', 20);
checkStringLength ('проверяемая строка', 18);
checkStringLength ('проверяемая строка', 10);

// Функция для проверки, является ли строка палиндромом. Палиндром — это слово или фраза, которые одинаково читаются и слева направо и справа налево.
/* Для решения этой задачи вам потребуется объявить функцию с одним параметром — строкой. Проверить строку на «палиндромность» можно разными способами. Например, вы можете:

«Нормализовать» полученную строку, для чего:
- убрать с помощью метода replaceAll() все пробелы,
- привести строку к верхнему (метод toUpperCase()) или к нижнему (метод toLowerCase()) регистру,
- записать полученную строку в новую переменную.

Создать новую пустую строку и сохранить её в ещё одну переменную.

Создать цикл for, переменная-счётчик которого отсчитывает порядковые номера (индексы) символов в «нормализованной» строке с конца к началу, то есть:
- изначально счётчик равен индексу последнего символа (он на 1 меньше длины строки),
- цикл останавливается при достижении начала строки (нулевого индекса),
- на каждой итерации счётчик уменьшается на 1.

В теле цикла на каждой итерации получать очередной символ «нормализованной» строки (с помощью квадратных скобок или метода at()).

С помощью оператора += дозаписать этот символ в созданную на втором шаге строку.

После того, как цикл отработает, полученную перевёрнутую строку сравнить (===) с «нормализованной».

Вернуть результат этого сравнения.
*/

function checkPalindrome (newString) {
  const string = newString.replaceAll(' ','').toLowerCase();
  for (let i = 0; i < string.length / 2; i++) {
    if (string.at(i) !== string.at(-i - 1)) { // string.at(i) === string[i]
      return false;
    }
  }
  return true;
}

checkPalindrome('Лёша на полке клопа нашёл ');
checkPalindrome('  Искать Такси');

/* Функция принимает строку, извлекает содержащиеся в ней цифры от 0 до 9 и возвращает их в виде целого положительного числа. Если в строке нет ни одной цифры, функция должна вернуть NaN:
Для решения этой задачи вам пригодятся:

цикл — для перебора полученной строки,
функция parseInt() — для превращения в число отдельных символов и результирующей строки,
функция Number.isNaN() — чтобы проверить, получилось ли превратить символ в число,
метод toString() — на случай, если в качестве параметра пришло число.
*/

function getNumberFromString (stringWithNumbers) {
  const string = stringWithNumbers.toString();
  let result = '';
  for (let i = 0; i < string.length; i++) {
    if (!Number.isNaN(parseInt(string[i], 10))) { // string[i] === string.at(i)
      result += string[i];
    }
  }
  return parseInt(result, 10);
}

getNumberFromString('2023 год');
getNumberFromString('ECMAScript 2022');
getNumberFromString('1 кефир, 0.5 батона');
getNumberFromString('агент 007');
getNumberFromString('а я томат');
